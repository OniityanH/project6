// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux8Way.hdl

/**
 * 8-way -bit multiplexor:
 * out = a if sel == 000
 *       b if sel == 001
 *       etc.
 *       h if sel == 111
 */

CHIP Mux8Way {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    Mux(a=a[0], b=b[0], sel=sel[0], out=l0);
    Mux(a=c[0], b=d[0], sel=sel[0], out=m0);
    Mux(a=e[0], b=f[0], sel=sel[0], out=n0);
    Mux(a=g[0], b=h[0], sel=sel[0], out=o0);
    Mux(a=l0, b=m0, sel=sel[1], out=p0);
    Mux(a=n0, b=o0, sel=sel[1], out=q0);
    Mux(a=p0, b=q0, sel=sel[2], out=out[0]);

    Mux(a=a[1], b=b[1], sel=sel[0], out=l1);
    Mux(a=c[1], b=d[1], sel=sel[0], out=m1);
    Mux(a=e[1], b=f[1], sel=sel[0], out=n1);
    Mux(a=g[1], b=h[1], sel=sel[0], out=o1);
    Mux(a=l1, b=m1, sel=sel[1], out=p1);
    Mux(a=n1, b=o1, sel=sel[1], out=q1);
    Mux(a=p1, b=q1, sel=sel[2], out=out[0]);

    Mux(a=a[2], b=b[2], sel=sel[0], out=l2);
    Mux(a=c[2], b=d[2], sel=sel[0], out=m2);
    Mux(a=e[2], b=f[2], sel=sel[0], out=n2);
    Mux(a=g[2], b=h[2], sel=sel[0], out=o2);
    Mux(a=l2, b=m2, sel=sel[1], out=p2);
    Mux(a=n2, b=o2, sel=sel[1], out=q2);
    Mux(a=p2, b=q2, sel=sel[2], out=out[2]);

    Mux(a=a[3], b=b[3], sel=sel[0], out=l3);
    Mux(a=c[3], b=d[3], sel=sel[0], out=m3);
    Mux(a=e[3], b=f[3], sel=sel[0], out=n3);
    Mux(a=g[3], b=h[3], sel=sel[0], out=o3);
    Mux(a=l3, b=m3, sel=sel[1], out=p3);
    Mux(a=n3, b=o3, sel=sel[1], out=q3);
    Mux(a=p3, b=q3, sel=sel[2], out=out[3]);

    Mux(a=a[4], b=b[4], sel=sel[0], out=l4);
    Mux(a=c[4], b=d[4], sel=sel[0], out=m4);
    Mux(a=e[4], b=f[4], sel=sel[0], out=n4);
    Mux(a=g[4], b=h[4], sel=sel[0], out=o4);
    Mux(a=l4, b=m4, sel=sel[1], out=p4);
    Mux(a=n4, b=o4, sel=sel[1], out=q4);
    Mux(a=p4, b=q4, sel=sel[2], out=out[4]);

    Mux(a=a[5], b=b[5], sel=sel[0], out=l5);
    Mux(a=c[5], b=d[5], sel=sel[0], out=m5);
    Mux(a=e[5], b=f[5], sel=sel[0], out=n5);
    Mux(a=g[5], b=h[5], sel=sel[0], out=o5);
    Mux(a=l5, b=m5, sel=sel[1], out=p5);
    Mux(a=n5, b=o5, sel=sel[1], out=q5);
    Mux(a=p5, b=q5, sel=sel[2], out=out[5]);

    Mux(a=a[6], b=b[6], sel=sel[0], out=l6);
    Mux(a=c[6], b=d[6], sel=sel[0], out=m6);
    Mux(a=e[6], b=f[6], sel=sel[0], out=n6);
    Mux(a=g[6], b=h[6], sel=sel[0], out=o6);
    Mux(a=l6, b=m6, sel=sel[1], out=p6);
    Mux(a=n6, b=o6, sel=sel[1], out=q6);
    Mux(a=p6, b=q6, sel=sel[2], out=out[6]);

    Mux(a=a[7], b=b[7], sel=sel[0], out=l7);
    Mux(a=c[7], b=d[7], sel=sel[0], out=m7);
    Mux(a=e[7], b=f[7], sel=sel[0], out=n7);
    Mux(a=g[7], b=h[7], sel=sel[0], out=o7);
    Mux(a=l7, b=m7, sel=sel[1], out=p7);
    Mux(a=n7, b=o7, sel=sel[1], out=q7);
    Mux(a=p7, b=q7, sel=sel[2], out=out[7]);

    Mux(a=a[8], b=b[8], sel=sel[0], out=l8);
    Mux(a=c[8], b=d[8], sel=sel[0], out=m8);
    Mux(a=e[8], b=f[8], sel=sel[0], out=n8);
    Mux(a=g[8], b=h[8], sel=sel[0], out=o8);
    Mux(a=l8, b=m8, sel=sel[1], out=p8);
    Mux(a=n8, b=o8, sel=sel[1], out=q8);
    Mux(a=p8, b=q8, sel=sel[2], out=out[8]);

    Mux(a=a[9], b=b[9], sel=sel[0], out=l9);
    Mux(a=c[9], b=d[9], sel=sel[0], out=m9);
    Mux(a=e[9], b=f[9], sel=sel[0], out=n9);
    Mux(a=g[9], b=h[9], sel=sel[0], out=o9);
    Mux(a=l9, b=m9, sel=sel[1], out=p9);
    Mux(a=n9, b=o9, sel=sel[1], out=q9);
    Mux(a=p9, b=q9, sel=sel[2], out=out[9]);

    Mux(a=a[10], b=b[10], sel=sel[0], out=l10);
    Mux(a=c[10], b=d[10], sel=sel[0], out=m10);
    Mux(a=e[10], b=f[10], sel=sel[0], out=n10);
    Mux(a=g[10], b=h[10], sel=sel[0], out=o10);
    Mux(a=l10, b=m10, sel=sel[1], out=p10);
    Mux(a=n10, b=o10, sel=sel[1], out=q10);
    Mux(a=p10, b=q10, sel=sel[2], out=out[10]);

    Mux(a=a[11], b=b[11], sel=sel[0], out=l11);
    Mux(a=c[11], b=d[11], sel=sel[0], out=m11);
    Mux(a=e[11], b=f[11], sel=sel[0], out=n11);
    Mux(a=g[11], b=h[11], sel=sel[0], out=o11);
    Mux(a=l11, b=m11, sel=sel[1], out=p11);
    Mux(a=n11, b=o11, sel=sel[1], out=q11);
    Mux(a=p11, b=q11, sel=sel[2], out=out[11]);

    Mux(a=a[12], b=b[12], sel=sel[0], out=l12);
    Mux(a=c[12], b=d[12], sel=sel[0], out=m12);
    Mux(a=e[12], b=f[12], sel=sel[0], out=n12);
    Mux(a=g[12], b=h[12], sel=sel[0], out=o12);
    Mux(a=l12, b=m12, sel=sel[1], out=p12);
    Mux(a=n12, b=o12, sel=sel[1], out=q12);
    Mux(a=p12, b=q12, sel=sel[2], out=out[12]);

    Mux(a=a[13], b=b[13], sel=sel[0], out=l13);
    Mux(a=c[13], b=d[13], sel=sel[0], out=m13);
    Mux(a=e[13], b=f[13], sel=sel[0], out=n13);
    Mux(a=g[13], b=h[13], sel=sel[0], out=o13);
    Mux(a=l13, b=m13, sel=sel[1], out=p13);
    Mux(a=n13, b=o13, sel=sel[1], out=q13);
    Mux(a=p13, b=q13, sel=sel[2], out=out[13]);

    Mux(a=a[14], b=b[14], sel=sel[0], out=l14);
    Mux(a=c[14], b=d[14], sel=sel[0], out=m14);
    Mux(a=e[14], b=f[14], sel=sel[0], out=n14);
    Mux(a=g[14], b=h[14], sel=sel[0], out=o14);
    Mux(a=l14, b=m14, sel=sel[1], out=p14);
    Mux(a=n14, b=o14, sel=sel[1], out=q14);
    Mux(a=p14, b=q14, sel=sel[2], out=out[14]);

    Mux(a=a[15], b=b[15], sel=sel[0], out=l15);
    Mux(a=c[15], b=d[15], sel=sel[0], out=m15);
    Mux(a=e[15], b=f[15], sel=sel[0], out=n15);
    Mux(a=g[15], b=h[15], sel=sel[0], out=o15);
    Mux(a=l15, b=m, sel=sel[1], out=p15);
    Mux(a=n15, b=o, sel=sel[1], out=q15);
    Mux(a=p15, b=q, sel=sel[2], out=out[15]);
}